# begin of section complete
[[plugins]] # Dark deno-powered completion framework for neovim/Vim8 with deno ts
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['pum.vim','denops.vim']
hook_source = '''
call ddc#custom#patch_global('completionMenu', 'pum.vim')
call ddc#custom#patch_global('sources', ['vim-lsp', 'neosnippet', 'file', 'around'])
call ddc#custom#patch_global('sourceOptions', {
	\ '_': {
	\   'matchers': ['matcher_head'],
    \   'converters': ['converter_remove_overlap'],
	\   'sorters': ['sorter_rank'],
	\ },
	\ 'file': {
	\   'mark': 'F',
	\   'isVolatile': v:true,
	\   'forceCompletionPattern': '\S/\S*',
	\ },
	\ 'neosnippet' :{
	\   'mark': 'snippet',
	\ },
	\ 'around': {'mark': 'Around'},
	\ 'vim-lsp': {
	\   'mark': 'LSP',
	\   'matchers': ['matcher_head'],
	\   'forceCompletionPattern': '\.|:|->|"\w+/*' },
	\ })
call ddc#custom#patch_global('sourceParams', {
	\ 'around': {'maxSize': 500},
	\ 'file' : {'mode': 'posix'},
	\ })
inoremap <silent><expr> <TAB>
			\ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
			\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
			\ '<TAB>' : ddc#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged',
    \ ])

nnoremap :       <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  " Note: It disables default command line completion!
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ ddc#manual_complete()
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  " Overwrite sources
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources',
          \ ['cmdline', 'cmdline-history', 'around'])

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
  call ddc#enable()
endfunction
function! CommandlinePost() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
  cunmap <Tab>
endfunction
call ddc#enable()
'''

[[plugins]] # dependency for ddc, to do Around completion
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]] # dependency for ddc, to do Heading matche
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]] # dependency for ddc, to avoide Removes overlapped text for ddc.vim
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]] # dependency for ddc, plugin to complete file path
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]] # dependency for ddc, to sort completions
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'
depends = ['vim-lsp']

[[plugins]] # dependency for ddc, for cmdline completion
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]] # dependency for ddc, for cmdline-history completion
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

#[[plugins]]
#repo = 'Shougo/ddc-nextword'

