# begin of section lsp
[[plugins]]
repo = 'prabirshrestha/async.vim'
on_event = 'InsertEnter'
source = 'vim-lsp'

# begin of section complete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['nvim-yarp','vim-hug-neovim-rpc']
on_event = 'InsertEnter'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
on_event = 'InsertEnter'
depends = [ 'deoplete.nvim']
hook_add = '''
imap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'ujihisa/neco-look'
on_event = 'InsertEnter'
depends = [ 'deoplete.nvim']


# begin of section complete::snippetes
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_event = 'InsertEnter'

[[plugins]]
repo =  'Shougo/neosnippet.vim'
depends = [ 'neosnippet-snippets']
on_event = 'InsertEnter'
hook_add='''
let g:neosnippet#snippets_directory = expand('~/.config/vim/rc/snippets')
imap <expr><C-k> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<C-k>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><C-k> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
xmap <expr><C-k> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" For conceal markers.
if has('conceal')
	  set conceallevel=2 concealcursor=inc
	  let g:tex_conceal=''
 endif
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
on_event = 'InsertEnter'
depends=['neosnippet.vim']


# end of section complete::snippets
# end of section complete

[[plugins]]
repo = 'ajpaulson/julia-syntax.vim'
on_ft = 'julia'
depends=['deoplete.nvim']

# this section is not supported language by lsp
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

# end of section

# this is section to Surround.vim is all about "surroundings": parentheses, brackets, quotes, XML tags, and more.
[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'InsertEnter'

# end of this section surroundings
[[plugins]]
repo ="kristijanhusak/defx-icons"

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['nvim-yarp','vim-hug-neovim-rpc','defx-icons']
on_cmd=['Defx']
hook_source='''
call defx#custom#column('icon', {
      \ 'directory_icon': 'd',
      \ 'opened_icon': 'o',
      \ 'root_icon': ' ',
      \ })

call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })

call defx#custom#column('mark', {
      \ 'readonly_icon': 'r',
      \ 'selected_icon': 's',
      \ })

call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ })

nnoremap <silent><C-n> :<C-u>Defx -split=vertical -toggle -winwidth=30<CR>
autocmd FileType defx call s:defx_my_settings()
	function! s:defx_my_settings() abort
	  " Define mappings
	  nnoremap <silent><buffer><expr> <CR>
	  \ defx#do_action('open')
	  nnoremap <silent><buffer><expr> c
	  \ defx#do_action('copy')
	  nnoremap <silent><buffer><expr> m
	  \ defx#do_action('move')
	  nnoremap <silent><buffer><expr> p
	  \ defx#do_action('paste')
	  nnoremap <silent><buffer><expr> l
	  \ defx#do_action('open')
	  nnoremap <silent><buffer><expr> E
	  \ defx#do_action('open', 'vsplit')
	  nnoremap <silent><buffer><expr> P
	  \ defx#do_action('open', 'pedit')
	  nnoremap <silent><buffer><expr> o
	  \ defx#do_action('open_or_close_tree')
	  nnoremap <silent><buffer><expr> K
	  \ defx#do_action('new_directory')
	  nnoremap <silent><buffer><expr> N
	  \ defx#do_action('new_file')
	  nnoremap <silent><buffer><expr> M
	  \ defx#do_action('new_multiple_files')
	  nnoremap <silent><buffer><expr> C
	  \ defx#do_action('toggle_columns',
	  \                'mark:indent:icon:filename:type:size:time')
	  nnoremap <silent><buffer><expr> S
	  \ defx#do_action('toggle_sort', 'time')
	  nnoremap <silent><buffer><expr> d
	  \ defx#do_action('remove')
	  nnoremap <silent><buffer><expr> r
	  \ defx#do_action('rename')
	  nnoremap <silent><buffer><expr> !
	  \ defx#do_action('execute_command')
	  nnoremap <silent><buffer><expr> x
	  \ defx#do_action('execute_system')
	  nnoremap <silent><buffer><expr> yy
	  \ defx#do_action('yank_path')
	  nnoremap <silent><buffer><expr> .
	  \ defx#do_action('toggle_ignored_files')
	  nnoremap <silent><buffer><expr> ;
	  \ defx#do_action('repeat')
	  nnoremap <silent><buffer><expr> h
	  \ defx#do_action('cd', ['..'])
	  nnoremap <silent><buffer><expr> ~
	  \ defx#do_action('cd')
	  nnoremap <silent><buffer><expr> q
	  \ defx#do_action('quit')
	  nnoremap <silent><buffer><expr> <Space>
	  \ defx#do_action('toggle_select') . 'j'
	  nnoremap <silent><buffer><expr> *
	  \ defx#do_action('toggle_select_all')
	  nnoremap <silent><buffer><expr> j
	  \ line('.') == line('$') ? 'gg' : 'j'
	  nnoremap <silent><buffer><expr> k
	  \ line('.') == 1 ? 'G' : 'k'
	  nnoremap <silent><buffer><expr> <C-l>
	  \ defx#do_action('redraw')
	  nnoremap <silent><buffer><expr> <C-g>
	  \ defx#do_action('print')
	  nnoremap <silent><buffer><expr> cd
	  \ defx#do_action('change_vim_cwd')
	endfunction
'''

[[plugins]]
repo = 'rhysd/vim-grammarous'
on_ft = 'tex'
hook_add = '''
let g:grammarous#default_comments_only_filetypes = {
\ '*' : v:false, 'help' : v:false, 'tex' : v:true,
\ }
'''
