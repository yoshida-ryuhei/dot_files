# begin of section lsp
[[plugins]]
repo = 'ujihisa/neco-look'
on_event = 'InsertEnter'

# begin of section complete::snippetes
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_event = 'InsertEnter'
on_cmd=['Neo']

[[plugins]]
repo =  'Shougo/neosnippet.vim'
depends = [ 'neosnippet-snippets']
on_event = 'InsertEnter'
hook_source='''
let g:neosnippet#snippets_directory = expand('~/.config/vim/rc/snippets')
imap <expr><C-k> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<C-k>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><C-k> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
xmap <expr><C-k> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
on_event = 'InsertEnter'
depends=['neosnippet.vim']

# end of section complete::snippets
# end of section complete

[[plugins]]
repo = 'ajpaulson/julia-syntax.vim'
on_ft = 'julia'

# this section is not supported language by lsp
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

# end of section

# this is section to Surround.vim is all about "surroundings": parentheses, brackets, quotes, XML tags, and more.
[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'InsertEnter'

# end of this section surroundings
[[plugins]] # popup menu completion plugin
repo = 'Shougo/pum.vim'

[[plugins]] # dependency for ddc and ddu, to use type script
repo = 'vim-denops/denops.vim'
hook_post_update = '''
if ! executable('deno')
	echomsg "Please Install deno."
endif
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = ['python', 'tex', 'plaintex', 'cpp', 'vim', 'typescript', 'rust']
hook_add='''
noremap <silent> <C-]> : <C-u>LspDefinition<CR>
noremap <silent> K : <C-u>LspDocumentDiagnostics<CR>
noremap <silent> gd : <C-u>LspDeclaration<CR>
noremap <silent> gr : <C-u>LspReferences<CR>
noremap <silent> gn : <C-u>LspNextError<CR>
noremap <silent> gp : <C-u>LspPreviousError<CR>

noremap <silent> gh : <C-u>LspHover<CR>
noremap <silent> gtd : <C-u>LspTypeDefinition<CR>
noremap <silent> gth : <C-u>LspTypeHierarchy<CR>
noremap <silent> gst : <C-u>LspStatus<CR>
noremap <silent> <F2> : <C-u>LspRename<CR>
noremap <silent> <F3> : <C-u>LspDocumentFormat<CR>
let g:lsp_use_lua = has('nvim-0.4.0') || (has('lua') && has('patch-8.2.0775'))
let g:lsp_diagnostics_float_cursor = v:true
let g:lsp_highlight_references_enabled = v:true
let g:tex_counceal = ''
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = 'vim-lsp'
hook_source='''
let l:status = 0

" TODO apply this script if only neccessary.
	let g:lsp_settings = {
		\   'texlab': {
		\   'whitelist' : ['plaintex', 'tex','sty']
		\   },
		\   'pyright-langserver': {
		\     'root_uri_patterns': ['pyproject.toml'],
		\   },
		\  'efm-langserver': {
		\    'disabled': 0,
		\   },
		\}
'''

[[plugins]]
repo = "tpope/vim-fugitive"
on_cmd = 'Git'
hook_add = '''
nnoremap gl <Cmd>Git blame<CR>
autocmd FileType fugitiveblame call s:fugitive_blame_my_settings()
function! s:fugitive_blame_my_settings() abort
  nnoremap <buffer> q <Cmd>quit<CR>
endfunction
'''
